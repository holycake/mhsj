// Éñ»°ÊÀ½ç¡¤Î÷ÓÎ¼Ç¡¤°æ±¾£´£®£µ£°
/* <SecCrypt CPL V3R05> */
 
// logind.c

#include <ansi.h>
#include <command.h>
#include <login.h>
#include <net/daemons.h>
#include <net/macros.h>

inherit F_DBASE;

int wiz_lock_level = WIZ_LOCK_LEVEL;

string *banned_name = ({
	"Äã", "ÎÒ", "Ëû", "Ëý", "Ëü", "Ëü", "½­ÔóÃñ", "µËÐ¡Æ½", "ÀîÅô", "ÖìéÅ»ù",
	"×Ô¼º", "Ä³ÈË", "Ê¬Ìå", "ÎÒÃÇ","ÄãÃÇ", "ËûÃÇ", "´ó¼Ò",
	"ËûÂèµÄ", "È¥ÄãµÄ", "Ã«Ôó¶«", "Î×Ê¦", "ËûÄÌÄÌµÄ","ÊÀ¼ÍÎ÷ÓÎ",
});

string *default_name=({"ºï×Ó","ºüÀê", "ÀÏÊó", 
	               "òßòÑ","¼×³æ","ºûµû","òåòå",
		       "ó«òë","Æ°³æ","»È³æ","ó¬ó°",
			"Å£", "ÀÏ»¢", "ÍÃ×Ó",
			"¹·","Ã¨ßä","Ñò","Öí",
			"ÂæÍÕ","ÎÚ¹ê","Éß","Óã¶ù",
			"Â¹","Âí","Ï¬Å£"});
string *default_prefix=({"Ð¡","´ó","ÀÏ","°×","»Æ","ºÚ","»¨","»Ò",
	"Ö½","Ä¾Í·","Ê¯Í·","Äà"});

int new_start=0;
void logind_user_log(); 
private void encoding(string arg, object ob);
private void if_young(string arg, object ob);
private void get_id(string arg, object ob);
private void confirm_id(string yn, object ob);
object make_body(object ob);
varargs void enter_world(object ob, object user, int silent);
varargs void reconnect(object ob, object user, int silent);
object find_body(string name);
int check_legal_id(string arg);
int check_legal_name(string arg);
string dis_attr(int value);
private void confirm_gift(string yn,object ob,object user);

void create() 
{
   seteuid(getuid());
  set("channel_id", NOR+CYN"Á¬Ïß¾«Áé"NOR);

        set("id", "logind");
}

void logind_user_log()
{
    int user=sizeof(users());
    int total,total_count;

    remove_call_out("logind_user_log");
    write_file("user_count",""+
            ((total=total_count)?total:user)+"\n"+
            user+"\n"+
            UPTIME_CMD->report_str()+"\n"+
            "Ä§»ÃÊÀ¼ÍÇàµºÕ¾" +"\n");
    call_out("logind_user_log",600);
}

// added by snowcat Mar 11 1998
int total_players()
{
   mapping mud_list;
   mixed *muds;
   string output;
   int loop, size, nb, total=0;

   if( !find_object(DNS_MASTER) )
     return 0;

   mud_list = (mapping)DNS_MASTER->query_muds();
   if(!mud_list)
     return 0;

   muds = keys( mud_list ) - ({ "DEFAULT" });
   for(loop = 0, size = sizeof(muds); loop<size; loop++) {
                if(mud_list[muds[loop]]["MUDLIB"]=="SJXY" &&
        !undefinedp(mud_list[muds[loop]]["USERS"])) {
        sscanf (mud_list[muds[loop]]["USERS"],"%d",nb);
        total += nb; 
     }
        }

   return total;
}

void logon(object ob)
{
    
    cat(WELCOME);
    write("    [If there is no response after ENTER, please try Ctrl-ENTER]\n");
    write("         "BBLU+HIR"[ÌáÊ¾£ºÈç¹û°´ENTER¼üºóÏµÍ³Ã»ÓÐÏìÓ¦£¬ÇëÊÔ Ctrl-ENTER]\n\n"NOR);
    write("            Welcome to"BLINK+HIG" MHSJ!"NOR" Select GB or BIG5 ("HIG"gb"NOR"/"HIR"big5"NOR"):");
    input_to( (: encoding :), ob );
}


private void encoding(string arg, object ob)
{
      object *usr;
	int i, ttl_cnt, wiz_cnt, ppl_cnt, i_user, login_cnt;
	string nowtime,ip_name, user_num, ip_number;
 	int ii;
        mixed info;
	int encode;
   
   if(!arg || arg=="") {
     write("\n[1;38mSelect ¹ú±êÂë GB or ¤j¤­½X BIG5 ("HIG"gb"NOR"/"HIR"big5"NOR"):[0;37;0m");
       input_to( (: encoding :), ob );
       return;
   } else if(arg[0..0]=="g" || arg[0..0]=="G")
       encode=0;
   else if(arg[0..0]=="b" || arg[0..0]=="B")
       encode=1;
   else {
     write("\n[1;38mSelect ¹ú±êÂë GB or ¤j¤­½X BIG5 ("HIG"gb"NOR"/"HIR"big5"NOR"):[0;37;0m");
       input_to( (: encoding :), ob );
       return;
   }
   
 
   ob->set_encoding(encode);

   ip_name = query_ip_name(ob);
   ip_number = query_ip_number(ob);

   if(new_start==0) { //only check for once.
     new_start++;
    }

if ("/adm/daemons/band"->is_strict_banned(query_ip_number(ob)) == 1) {
	   	write(HIR"ÄúµÄµØÖ·ÔÚ±¾ MUD Ö®ÐÅÓþ±»ÈËÆÆ»µÁË¡£\nÇëE-MAIL:sjxy2000@sina.com ÉêÊö¡£\n"NOR);
	   	destruct(ob);
		log_file( "ALLCONT", sprintf("kicked out, strict_banned\n"));
	   	return;
	}

write(CLR);


//log all connections.
 log_file( "ALLCONT", sprintf("IP_name--number  %s--%s (%s)\n", ip_name,
                                ip_number, ctime(time()) ) );
   
   // try not accept "name" as IP

   if (!ip_name) {
     destruct(ob);
     log_file( "ALLCONT", sprintf("kicked out, No IP\n"));
     return;
   }

   for(ii=0; ii<sizeof(ip_number); ii++) {
     if( (ip_number[ii] != '.')&&(ip_number[ii]>'9') ){
        destruct(ob);
        log_file( "ALLCONT", sprintf("kicked out, Non_number\n"));
        return;
     }
   }

   usr = users();
   wiz_cnt = 0;
   ppl_cnt = 0;
   login_cnt = 0;
   for(i=0; i<sizeof(usr); i++) {
     if( !environment(usr[i]) ) login_cnt++;
     else if( (wizardp(usr[i]) && (string)wizhood(usr[i])!="(elder)")&& !usr[i]->query("env/invisibility") ) wiz_cnt++;
     else ppl_cnt++;
   }
   // snowcat Mar 11 1998
   ttl_cnt = total_players();
   if (ttl_cnt == 0) 
     printf("\n"); // info not available 
      nowtime = BJTIME_D->chinese_time(5, time());
       printf(BBLU+CYN"±±¾©Ê±¼ä: %s \n"NOR,nowtime);   
       printf(HIC"±¾Õ¾Ö÷Ò³: http://10.16.2.214/mud\n"NOR); 
       printf(HIC"±¾Õ¾ÓÊÏä: hgala@163.com\n"NOR); 
       printf(HIC"¸üÐÂÎ¬»¤: Ä§»Ã¿ª·¢×é\n\n"NOR); 
       user_num=read_file(__DIR__"users",1);
	i_user=atoi(user_num);
	printf(WHT"[Ä§»ÃÊÀ¼Í×Ô"NOR+HIY"2000Äê12ÔÂ10ÈÕ"NOR+WHT"¿ªÕ¾ÒÔÀ´]\n"+WHT"À´·ÃÈËÊý¹²¼Æ£º%sÈË´Î\n"NOR,chinese_number(i_user)); 
	i_user=i_user+1; 
	user_num=sprintf("%d", i_user); 
	write_file(__DIR__"users",user_num,1);
	user_num=read_file(__DIR__"iduser",1);
       i_user=atoi(user_num);
       printf(WHT"¹²ÓÐ×¢²áÈËÊý£º%sÎ»Íæ¼Ò\n\n"NOR,chinese_number(i_user));
       UPTIME_CMD->report ();
     // ttl_cnt = wiz_cnt + ppl_cnt;
     printf("Ä¿Ç°¹²ÓÐ[1;31m %d[0;37;0m Î»Íæ¼ÒÔÚÏßÉÏ¡£", ttl_cnt );
     printf("\n±¾Õ¾¹²ÓÐ[1;31m %d[0;37;0m Î»¹ÜÀíÈËÔ±¡¢[1;36m%d[0;37;0m Î»Íæ¼Ò£¬ÒÔ¼°[1;33m %d[0;37;0m Î»ÔÚ³¢ÊÔÁ¬Ïß¡£\n\n",
     wiz_cnt, ppl_cnt, login_cnt );
     if(file_size("/log/static/LASTCRASH")>0 ) write("ÉÏ´Îµ±»úÔ­ÒòÊÇÎ×Ê¦:" + read_file("/log/static/LASTCRASH"));
     
	// mon 11/7/98
	//check whether user_log still running.
	info = filter_array(call_out_info(), (: $1[1]=="logind_user_log" :));
	if(!sizeof(info)) logind_user_log();

 if (ob) ob->set_temp("id_count",0);
     write("¼øÓÚÑ§ÉúµÄÖ÷ÒªÈÎÎñÊÇÑ§Ï°£¬±¾ÓÎÏ·²»»¶Ó­ÖÐÐ¡Ñ§ÉúÀ´Íæ¡£\n");
	write("ÄúÊÇ·ñÊÇÖÐÐ¡Ñ§Ñ§Éú»òÄêÁä¸üÐ¡£¿([1;31myes[0;37;0m/[1;33mno[0;37;0m)");
	input_to( (: if_young :), ob );
}

private void if_young(string arg, object ob)
{
        int id_count;

        id_count=ob->query_temp("id_count");
// mon 7/19/97 to prevent flooding by repeating illegal id.
        id_count++;
        ob->set_temp("id_count",id_count);
        if(id_count>3) {
          destruct(ob);
          log_file( "ALLCONT", sprintf("kicked out, illegal ID.\n"));
          return;
        }

        if(arg=="\n" || arg=="") {
	    write("ÄúÊÇ·ñÊÇÖÐÐ¡Ñ§Ñ§Éú»òÄêÁä¸üÐ¡£¿(yes/no)");
	    input_to( (: if_young :), ob );
	    return;
	}

	if( arg[0..0] == "y" || arg[0..0] == "Y" )
	{
		write("\nºÃ£¬¸Ï½ôÈ¥Ñ§Ï°²ÅÊÇÕýµÀÀí¡£\n");
		destruct(ob);
		return;
	}

	if( arg[0..0] != "n" && arg[0..0] != "N" ) {
	    write("ÄúÊÇ·ñÊÇÖÐÐ¡Ñ§Ñ§Éú»òÄêÁä¸üÐ¡£¿(yes/no)");
	    input_to( (: if_young :), ob );
	    return;
	}

	write("\nÄúµÄÓ¢ÎÄÃû×Ö£º");
	input_to( (: get_id :), ob);
}


private void get_id(string arg, object ob)
{
	object ppl, *usr = children(USER_OB);
        int id_count;

//edw 6/2/98
        int NowLogin, MaxLimit, login_site, i;
	string my_ip, new_ip;
//end edw

        if(!ob) return;

        id_count=ob->query_temp("id_count");
// mon 7/19/97 to prevent flooding by repeating illegal id. 
        id_count++;
        ob->set_temp("id_count",id_count);
	if(id_count>6) {
	  destruct(ob);
          log_file( "ALLCONT", sprintf("kicked out, illegal ID.\n"));
	  return;
        }

	arg = lower_case(arg);
	if( !check_legal_id(arg)) {
		write("ÄúµÄÓ¢ÎÄÃû×Ö£º");
		input_to("get_id", ob);
		return;
	}

#ifdef MAX_USERS
   if( (string)SECURITY_D->get_status(arg)=="(player)"
   && sizeof(users()) >= MAX_USERS + 5 ) {
     ppl = find_body(arg);
     // Only allow reconnect an interactive player when MAX_USERS exceeded.
     if( !ppl || !interactive(ppl) ) {
       write("¶Ô²»Æð£¬"+MUD_NAME+"µÄÍæ¼ÒÒÑ¾­Ì«¶àÁË£¬Çë´ý»á¶ùÔÙÀ´¡£\n");
       destruct(ob);
       return;
     }
   }
#endif

   if( wiz_level(arg) < wiz_lock_level ) {
     write("¶Ô²»Æð£¬" + MUD_NAME + "Ä¿Ç°ÏÞÖÆÎ×Ê¦µÈ¼¶ " + WIZ_LOCK_LEVEL
        + " ÒÔÉÏµÄÈË²ÅÄÜÁ¬Ïß¡£\n");
     destruct(ob);
     return;
   }
   
   if( (string)ob->set("id", arg) != arg ) {
     write("Failed setting user name.\n");
     destruct(ob);
     return;
   }

   if( arg=="guest" ) {
     // If guest, let them create the character.
     confirm_id("Yes", ob);
     return;
   } else if( file_size(ob->query_save_file() + __SAVE_EXTENSION__) >= 0 ) {
     if( ob->restore() ) {
        write("ÇëÊäÈëÃÜÂë£º");
        input_to("get_passwd", 1, ob);
        return;
     }
     write("ÄúµÄÈËÎï´¢´æµµ³öÁËÒ»Ð©ÎÊÌâ£¬ÇëÀûÓÃ guest ÈËÎïÍ¨ÖªÎ×Ê¦´¦Àí¡£\n");
     destruct(ob);
     return;
   }

   write("Ê¹ÓÃ "HIY + (string)ob->query("id") + NOR" Õâ¸öÃû×Ö½«»á´´ÔìÒ»¸öÐÂµÄÈËÎï£¬ÄúÈ·¶¨Âð(y/n)£¿");
   input_to("confirm_id", ob);
}

private void get_passwd(string pass, object ob)
{
   string my_pass;
   object user;

   write("\n");
   my_pass = ob->query("password");
   if( crypt(pass, my_pass) != my_pass ||
    !SECURITY_D->match_wiz_site(ob, query_ip_number(ob)) ) {
     write("ÃÜÂë´íÎó£¡");
     write("ÇëÖØÐÂÁ¬Ïß£¬¼üÈëÕýÈ·µÄÃÜÂë»òÁíÈ¡Ò»¸öÐÂµÄÓ¢ÎÄÃû×Ö¡£\n");
     destruct(ob);
     return;
   }

   // Check if we are already playing.
   user = find_body(ob->query("id"));
   if (user) {
       
     if( !interactive(user) ) {
			reconnect(ob, user);
			return;
		}

    
     write("ÄúÒª½«ÁíÒ»¸öÁ¬ÏßÖÐµÄÏàÍ¬ÈËÎï¸Ï³öÈ¥£¬È¡¶ø´úÖ®Âð£¿(y/n)");
     input_to("confirm_relogin", ob, user);
     return;
   }

   if( objectp(user = make_body(ob)) ) {
     if( user->restore() ) {
        log_file( "USAGE", sprintf("%s(%s) loggined from %s (%s)\n", user->query("name"),
          user->query("id"), query_ip_number(ob), ctime(time()) ) );

        enter_world(ob, user);
        return;
     } else {
        destruct(user);
     }
   }
   write("ÇëÄúÖØÐÂ´´ÔìÕâ¸öÈËÎï¡£\n");
   confirm_id("y", ob);
}

private void confirm_relogin(string yn, object ob, object user)
{
   object old_link;

   if( yn=="" ) {
     write("ÄúÒª½«ÁíÒ»¸öÁ¬ÏßÖÐµÄÏàÍ¬ÈËÎï¸Ï³öÈ¥£¬È¡¶ø´úÖ®Âð£¿(y/n)");
     input_to("confirm_relogin", ob, user);
     return;
   }   

   if( (yn[0]!='y' && yn[0]!='Y') || !user ) {
       // user may be destructed during the process.
       // so I put in this check. mon 4/15/98
     write("ºÃ°É£¬»¶Ó­ÏÂ´ÎÔÙÀ´¡£\n");
     destruct(ob);
     return;
   } 
   else {
     tell_object(user, "ÓÐÈË´Ó±ð´¦( " + query_ip_number(ob)
        + " )Á¬ÏßÈ¡´úÄãËù¿ØÖÆµÄÈËÎï¡£\n");
     log_file( "USAGE", sprintf("%s(%s) replaced by %s (%s)\n",
     user->query("name"), user->query("id"),
        query_ip_number(ob), ctime(time()) ) );
   }

   // Kick out tho old player.
   old_link = user->query_temp("link_ob");
   if( old_link ) {
           
           // 5/11/98 mon
         user->set_encoding(ob->query_encoding());
         exec(old_link, user);
         destruct(old_link);
         
   }

   reconnect(ob, user);   
}

private void confirm_id(string yn, object ob)
{
   if( yn=="" ) {
     write("Ê¹ÓÃÕâ¸öÃû×Ö½«»á´´ÔìÒ»¸öÐÂµÄÈËÎï£¬ÄúÈ·¶¨Âð(y/n)£¿");
     input_to("confirm_id", ob);
     return;
   }   

   if( yn[0]!='y' && yn[0]!='Y' ) {
     write("ºÃ°É£¬ÄÇÃ´ÇëÖØÐÂÊäÈëÄúµÄÓ¢ÎÄÃû×Ö£º");
     input_to("get_id", ob);
     return;
   }

  	write( @TEXT

ÇëÄú¸ø×Ô¼ºÏëÒ»¸ö·ûºÏÄ§»ÃÊÀ¼ÍÉñ»°ÊÀ½çµÄÖÐÎÄÃû×Ö¡£Õâ¸ö
Ãû×Ö½«´ú±íÄãÔÚÄ§»ÃÊÀ¼ÍÖÐµÄÈËÎï£¬¶øÇÒÍùºó½«²»ÄÜÔÙ¸ü¸Ä¡£
Çë²»ÒªÈ¡Ò»Ð©²»ÑÅ»òÊÇÈÝÒ×Ôì³ÉËûÈËÀ§ÈÅµÄÃû×Ö¡£

TEXT
   );
   write("ÄúµÄÖÐÎÄÃû×Ö£º");
   ob->set_temp("get_name",0);
   input_to("get_name", ob);
}

private void get_name(string arg, object ob)
{
   if( !check_legal_name(arg) ) {
            ob->add_temp("get_name",1);
       if(ob->query_temp("get_name")>2) {
           // the user can't input proper chinese name.
           // assign one for him/her.    mon 4/19/98

     arg=default_prefix[random(sizeof(default_prefix))]+
         default_name[random(sizeof(default_name))];

     write("ÒòÎªÄã²»ÄÜÊäÈëÊÊµ±µÄÖÐÎÄÃû×Ö£¬ÏµÍ³Ö¸¶¨ÄãµÄÃû×ÖÎª£º"+
        arg+"\n");
     write("ÇëÔÚ½øÈëÓÎÏ·ºóÇëÎ×Ê¦°ïÖúÐÞ¸Ä¡£\n");

       } else {
     write("ÄúµÄÖÐÎÄÃû×Ö£º");
     input_to("get_name", ob);
     return;
       }
   }

   printf("%O\n", ob);
   ob->set("name", arg);
   write("ÇëÉè¶¨ÄúµÄÃÜÂë£º");
   input_to("new_password", 1, ob);
}

private void new_password(string pass, object ob)
{
   write("\n");
   if( strlen(pass)<5 ) {
     write("ÃÜÂëµÄ³¤¶ÈÖÁÉÙÒªÎå¸ö×ÖÔª£¬ÇëÖØÉèÄúµÄÃÜÂë£º");
     input_to("new_password", 1, ob);
     return;
   }
   ob->set("password", crypt(pass,0) );
   write("ÇëÔÙÊäÈëÒ»´ÎÄúµÄÃÜÂë£¬ÒÔÈ·ÈÏÄúÃ»¼Ç´í£º");
   input_to("confirm_password", 1, ob);
}

private void confirm_password(string pass, object ob)
{    	string old_pass;
	write("\n");
	old_pass = ob->query("password");
	if( crypt(pass, old_pass)!=old_pass ) {
		write("ÄúÁ½´ÎÊäÈëµÄÃÜÂë²¢²»Ò»Ñù£¬ÇëÖØÐÂÉè¶¨Ò»´ÎÃÜÂë£º");
		input_to("new_password", 1, ob);
		return;
	}
          write(BLINK+RED"×¢Òâ!"NOR+ CYN" ÇëÕýÈ·ÌîÉÏÄúµÄµç×ÓÓÊ¼þµØÖ·ÒÔ±ãµ±ÄãµÄÃÜÂë±»µÁÊ±·½±ã»Ö¸´\n\n"NOR+"ÄúµÄµç×ÓÓÊ¼þµØÖ·£º");
          input_to("get_email",  ob);
    }

private void get_email(string email, object ob)
{    int id_count,i_user;
     object user;
     string user_num;
     id_count=ob->query_temp("id_count");
     id_count++;
     ob->set_temp("id_count",id_count);
     if(email=="\n" || email=="")
     { if(id_count>5) destruct(ob);
       else{
       write("ÄúµÄµç×ÓÓÊ¼þµØÖ·£º");
       input_to("get_email",  ob);
       }
     
      }
    else 
    {ob->set("email", email);
     user_num=read_file(__DIR__"iduser",1);
    i_user=atoi(user_num);
    i_user=i_user+1; 
    user_num=sprintf("%d", i_user); 
    write_file(__DIR__"iduser",user_num,1);
    ob->set("body", USER_OB);
     }
    
    if( !objectp(user = make_body(ob)) )
     return;

   write("ÄúÒª°çÑÝÄÐÐÔ(m)µÄ½ÇÉ«»òÅ®ÐÔ(f)µÄ½ÇÉ«£¿");
   input_to("get_gender", ob, user);
}

private void get_gender(string gender, object ob, object user)
{   int id_count;
    id_count=ob->query_temp("id_count");
    id_count++;
    ob->set_temp("id_count",id_count);
   if( gender=="" ||gender=="\n" ) { 
     if(id_count>5) destruct(ob);
     else{
     write("ÄúÒª°çÑÝÄÐÐÔ(m)µÄ½ÇÉ«»òÅ®ÐÔ(f)µÄ½ÇÉ«£¿");
     input_to("get_gender", ob, user);
     return;}
    }

   if( gender[0]=='m' || gender[0]=='M' )
     user->set("gender", "ÄÐÐÔ");
   else if( gender[0]=='f' || gender[0]=='F' ) user->set("gender", "Å®ÐÔ" );
   else {
     write("¶Ô²»Æð£¬ÄúÖ»ÄÜÑ¡ÔñÄÐÐÔ(m)»òÅ®ÐÔ(f)µÄ½ÇÉ«£º");
     input_to("get_gender", ob, user);
     return;
    }
    return confirm_gift("n",ob,user);

}

object make_body(object ob)
{
   string err;
   object user;
   int n;

        if(!ob->query("body")) {
     return 0;
        }
   user = new(ob->query("body"));
   if(!user) {
     write("ÏÖÔÚ¿ÉÄÜÓÐÈËÕýÔÚÐÞ¸ÄÊ¹ÓÃÕßÎï¼þµÄ³ÌÊ½£¬ÎÞ·¨½øÐÐ¸´ÖÆ¡£\n");
     write(err+"\n");
     return 0;
   }
   seteuid(ob->query("id"));
   export_uid(user);
   export_uid(ob);
   seteuid(getuid());
   user->set("id", ob->query("id"));
   user->set_name( ob->query("name"), ({ ob->query("id")}) );
   return user;
}

private void confirm_gift(string yn, object ob, object user)
{
        int n, a, b;

	if(!ob || !user) {
            if(user) {
	      destruct(user);
	      return;
	    }
            if(ob) destruct(ob);
	    return;
        }

        user->set("kar", 20 );
	user->set("str", 20 );
	user->set("cps", 20 );
	user->set("int", 25 );
	user->set("cor", 20 );
	user->set("con", 20 );
	user->set("spi", 25 );
	user->set("per", 20 );

	// mon 3/21/99 allow players to choose gift after login.
	user->set("no_gift",1);

	    CHAR_D->setup_char(user); //setup user weight. mon 11/7/97
	    user->set("title", "ÆÕÍ¨°ÙÐÕ");
	    user->set("birthday", time() );
	    user->set("potential", 99);
	    user->set("food", user->max_food_capacity());
	    user->set("water", user->max_water_capacity());
            user->set("channels", ({ "chat","rumor","xyj","sldh","es","party", }) );
	    log_file( "USAGE", sprintf("%s was created from %s (%s)\n", user->query("id"),
		query_ip_number(ob), ctime(time()) ) );

	    ob->set("last_from",query_ip_number(ob));
	    ob->set("last_on",time());
                
	    return enter_world(ob, user);
}


string dis_attr(int value)
{       int gift=20;
        if( value > gift ) return sprintf( HIY "%3d" NOR, value );
        else if( value < gift ) return sprintf( CYN "%3d" NOR, value );
        else return sprintf("%3d", value);
}

varargs void enter_world(object ob, object user, int silent)
{            
        object cloth, room, mbx;
	string startroom="";
	string ip_from,name,id,rank;
	int num;

       reset_eval_cost();

	user->set_temp("link_ob", ob);
	ob->set_temp("body_ob", user);
            
      // 5/11/98 mon
	user->set_encoding(ob->query_encoding());

	exec(user, ob);

	write("Ä¿Ç°È¨ÏÞ£º" HIG+ wizhood(user) + NOR"\n");
	user->setup();
       //11/2000 by cnd
        
	// In case of new player, we save them here right aftre setup 
	// compeleted.
	user->save();
	ob->save();
//        "/adm/daemons/toptend"->topten_checkplayer(user);
        if( !silent ) {
	     if(file_size(MOTD)>0)
             user->start_more(read_file(MOTD));
		
	     // mon 3/21/99 
	     // new user login.
             if(user->query("no_gift")) {
	       user->move("/d/wiz/init",1);
	     } else {
		if( user->is_ghost() )
			startroom = DEATH_ROOM;
		else if( strlen(startroom = user->query("startroom"))<2 )
			startroom = START_ROOM;

                if(!wizardp(user) && startroom[0..2]=="/u/") {
		  startroom = START_ROOM;
                  user->set("startroom",startroom);
                }
                //added by mon 10/27/97

		// the following 7 lines are aded by snowcat dec 10 1997
		if (("/adm/daemons/band"
		    ->create_char_banned(query_ip_number(user)) == 1 ||
	    	    "/adm/daemons/band"->is_banned(query_ip_number(user))
		    == 1) && !wizardp(user)) {
			user->move("/d/wiz/guest");
			log_file( "ALLCONT", sprintf("from banned site\n"));
		}
		else if( !catch(load_object(startroom)) )
			user->move(startroom);
		else {
			user->move(START_ROOM);
			startroom = START_ROOM;
			user->set("startroom", START_ROOM);
		}
		if(!wizardp(user) || !user->query("env/invisibility"))
		tell_room(startroom, user->query("name") + "Á¬Ïß½øÈëÕâ¸öÊÀ½ç¡£\n",
			({user}));
	     }
		 
   		if(file_size("/log/notice")>0){
			write(CYN"     ¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô"HIR"Ä§»ÃÊÀ¼ÍÍ¨Öª"NOR CYN"¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô\n");
          		write("     "+read_file("/log/notice"));
   	  		write(NOR+CYN"\n     ¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô¡Ô\n"NOR);        }
		mbx=ob->query_temp("mbox_ob");
		if (!mbx) {
		  mbx=new(MAILBOX_OB);
		  mbx->set_owner(ob->query("id"));
                }
		num=mbx->query_new_mail();
		if( num>0 ) {
	          write( GRN + "\nÇ§ÀïÑÛ¸æËßÄã£ºÓÐÄú"
		    +chinese_number(num)+
		    "·âÐÅ£¡Çëµ½ÄÏ³Ç¿ÍÕ»À´Ò»ÌË£®£®£®\n\n" + NOR);
		}
		destruct(mbx);
	      	ip_from="/adm/daemons/ipd"->seek_ip_address(query_ip_number(user));
	        CHANNEL_D->do_channel( this_object(), "sys",
		sprintf(NOR HIG"%sÓÉ["NOR+CYN"%s"NOR+HIG "]Á¬Ïß½øÈë,IPÀ´×Ô:["NOR+CYN"%s"NOR+HIG"]"NOR,user->name()+"("+capitalize(user->query("id")) + ")", query_ip_number(user), ip_from));  
	}
	
        name = user->query("name");
        id = user->query("id");
        rank = RANK_D->query_respect(user);
        if(!wizardp(user) || !user->query("env/invisibility"))
        CHANNEL_D->do_channel( this_object(), "chat",
	sprintf(NOR+CYN"ÌýËµÓÐÒ»Î»½Ð×ö¡° "NOR+MAG"%s"NOR+HIG" <%s>"NOR+CYN" ¡±µÄ%sÀ´µ½¡¶Ä§»ÃÊÀ¼Í¡·ÇóÈ¡Õæ¾­¡£\n"NOR,name,id,rank) );
	UPDATE_D->check_user(user, 0);
        NEWS_D->check_news(user);

      {object caishen;
	if(objectp(caishen=find_object("/d/wiz/npc/caishen"))) {
	  caishen->check_one(user);
        }
      }
}

varargs void reconnect(object ob, object user, int silent)
{
        object old_link;
	
	// mon 9/15/98
	old_link=user->query_temp("link_ob");
	if(old_link && old_link!=ob)
	    destruct(old_link);

	user->set_temp("link_ob", ob);
        ob->set_temp("body_ob", user);
  
	// 5/11/98 mon
	user->set_encoding(ob->query_encoding());

	exec(user, ob);

	user->reconnect();
	if( !silent && !user->query("env/invisibility")) {
		tell_room(environment(user), user->query("name") + "ÖØÐÂÁ¬Ïß»Øµ½Õâ¸öÊÀ½ç¡£[1;32mGood Luck![2;37;0m\n",
		({user}));
		CHANNEL_D->do_channel( this_object(), "sys",
			sprintf("%sÓÉ%sÖØÐÂÁ¬Ïß½øÈë¡£", user->query("name")+"(" + capitalize(user->query("id")) + ")", query_ip_name(user)) );
	}
	UPDATE_D->check_user(user, 1); // this is for reconnect.
}

int check_legal_id(string id)
{
	int i;
	string *legalid;

	i = strlen(id);
	
	if( (strlen(id) < 3) || (strlen(id) > 8 ) ) {
		write("¶Ô²»Æð£¬ÄãµÄÓ¢ÎÄÃû×Ö±ØÐëÊÇ 3 µ½ 8 ¸öÓ¢ÎÄ×ÖÄ¸¡£\n");
		return 0;
	}
	while(i--)
		if( id[i]<'a' || id[i]>'z' ) {
			write("¶Ô²»Æð£¬ÄãµÄÓ¢ÎÄÃû×ÖÖ»ÄÜÓÃÓ¢ÎÄ×ÖÄ¸¡£\n");
			return 0;
		}
	legalid = explode(read_file(BANNED_ID), "\n");
	for(i=0; i<sizeof(legalid); i++)   {
	   if( id == legalid[i] )   {
		  write("¶Ô²»Æð£¬ÕâÖÖÃû×Ö»áÔì³ÉÆäËûÈËµÄÀ§ÈÅ¡£\n");
		  return 0;
       }
	}
	return 1;
}

int check_legal_name(string name)
{
	int i;

	i = strlen(name);
	
	if( (strlen(name) < 2) || (strlen(name) > 12 ) ) {
		write("¶Ô²»Æð£¬ÄãµÄÖÐÎÄÃû×Ö±ØÐëÊÇÒ»µ½Áù¸öÖÐÎÄ×Ö¡£\n");
		return 0;
	}
	while(i--) {
		if( name[i]<=' ' ) {
			write("¶Ô²»Æð£¬ÄãµÄÖÐÎÄÃû×Ö²»ÄÜÓÃ¿ØÖÆ×Ö·û¡£\n");
			return 0;
		}
		if( i%2==0 && !is_chinese(name[i..<0]) ) {
			write("¶Ô²»Æð£¬ÇëÄúÓÃ¡¸ÖÐÎÄ¡¹È¡Ãû×Ö¡£\n");
			return 0;
		}
	}
	if( member_array(name, banned_name)!=-1 ) {
		write("¶Ô²»Æð£¬ÕâÖÖÃû×Ö»áÔì³ÉÆäËûÈËµÄÀ§ÈÅ¡£\n");
		return 0;
	}

	return 1;
}

object find_body(string name)
{
	object ob, *body;

	if( objectp(ob = find_player(name)) )
		return ob;
	body = children(USER_OB);
	for(int i=0; i<sizeof(body); i++) {
          ob=body[i];
	  if( clonep(ob) && getuid(ob) == name 
            && ob->query("max_gin")>0 ) return ob;
	    //check max_gin to avoid damaged user object.
        }

	return 0;
}

int set_wizlock(int level)
{
	if( wiz_level(this_player(1)) <= level )
		return 0;
	if( geteuid(previous_object()) != ROOT_UID )
		return 0;
	wiz_lock_level = level;
	return 1;
}
